function usage(){
cat << XXX
usage: $0 [OPTIONS]

OPTIONS:
        
	-m --minute:                 Minute to execute task. [default:*]
	-h --hour:                   Hour to execute task. [default:*]
	-d --day-of-month:           Day number of month to execute task. [default:*]
	-n --month:                  Month to execute task. [default:*]
	-e --day-of-week:            Hour to execute task. [default:*]
	-t --task:                   task command to execute.

        -? --help  :  usage

XXX
}

# Contract long options into short options
params=""
while [ $# -ne 0 ]; do
        param="$1"
        shift

        case "$param" in
                
		--minute)
			params="$params -m";;
		--minute=*)
			params="$params -m=${param#*=}";;
		--hour)
			params="$params -h";;
		--hour=*)
			params="$params -h=${param#*=}";;
		--day-of-month)
			params="$params -d";;
		--day-of-month=*)
			params="$params -d=${param#*=}";;
		--month)
			params="$params -n";;
		--month=*)
			params="$params -n=${param#*=}";;
		--day-of-week)
			params="$params -e";;
		--day-of-week=*)
			params="$params -e=${param#*=}";;
		--task)
			params="$params -t";;
		--task=*)
			params="$params -t=${param#*=}";;
                "-?"|--help)
                        usage
                        exit 0;;
                *)
                        if [[ "$param" == --* ]]; then
                                echo -e "Unrecognized long option: $param"
                                usage
                                exit 1
                        fi
                        params="$params \"$param\"";;
        esac
done

eval set -- "$params"

# Set default variable values

minute=*
hour=*
day_of_month=*
month=*
day_of_week=*

# Get required options and parameters
required_short_options=""
required_long_options=""

# Create an associative array with with short options as keys and long options as values
declare -A hash_options=([-m]=--minute [-h]=--hour [-d]=--day-of-month [-n]=--month [-e]=--day-of-week [-t]=--task )

# Process using getopts 
while getopts "m:h:d:n:e:t:" option; do
        # Return error when argument is an option of type Ex: --option or --option=xxxxx
        [[ -n "$OPTARG" ]] && [[ "${required_short_options}" == *"${OPTARG/=*/}"* ]] && echo "Invalid parameter: ${hash_options["${OPTARG/=*/}"]}"=${OPTARG#*=} && usage
        case $option in
                # Substitute actions for different variables
                
		m)
			minute="$OPTARG"
			$(grep -q '^=' <<< "$OPTARG") && hash_options[-m"$OPTARG"]=--minute"$OPTARG";;
		h)
			hour="$OPTARG"
			$(grep -q '^=' <<< "$OPTARG") && hash_options[-h"$OPTARG"]=--hour"$OPTARG";;
		d)
			day_of_month="$OPTARG"
			$(grep -q '^=' <<< "$OPTARG") && hash_options[-d"$OPTARG"]=--day-of-month"$OPTARG";;
		n)
			month="$OPTARG"
			$(grep -q '^=' <<< "$OPTARG") && hash_options[-n"$OPTARG"]=--month"$OPTARG";;
		e)
			day_of_week="$OPTARG"
			$(grep -q '^=' <<< "$OPTARG") && hash_options[-e"$OPTARG"]=--day-of-week"$OPTARG";;
		t)
			task="$OPTARG"
			$(grep -q '^=' <<< "$OPTARG") && hash_options[-t"$OPTARG"]=--task"$OPTARG";;
                :)
                        echo "Option - $OPTARG requires an argument"
                        exit 1;;
                *)      
                        echo "Unknown option: $option"
                        usage
                        exit 1;;
        esac
done

# Clean up after self
[[ -z "configure_cron_task.sh" ]] && rm /usr/local/bin/configure_cron_task.sh_optparse

